{"instance_id": "DataDog__integrations-core-1019", "model_patch": "\ndiff --git a/haproxy/datadog_checks/haproxy/haproxy.py b/haproxy/datadog_checks/haproxy/haproxy.py\nindex 5342d59af5..e133283a2f 100644\n--- a/haproxy/datadog_checks/haproxy/haproxy.py\n+++ b/haproxy/datadog_checks/haproxy/haproxy.py\n@@ -8,13 +8,17 @@ import copy\n import re\n import socket\n import time\n-import urlparse\n+try:\n+    from urllib.parse import urlparse\n+except ImportError:\n+    # Fallback for Python 2\n+    from urlparse import urlparse\n \n # 3rd party\n import requests\n \n # project\n-from checks import AgentCheck\n+from datadog_checks.base import AgentCheck\n from config import _is_affirmative\n from util import headers\n \n@@ -108,13 +112,15 @@ class HAProxy(AgentCheck):\n \n         if parsed_url.scheme == 'unix':\n             data = self._fetch_socket_data(parsed_url.path)\n-\n         else:\n             username = instance.get('username')\n             password = instance.get('password')\n+            headers = instance.get('headers', {})\n             verify = not _is_affirmative(instance.get('disable_ssl_validation', False))\n \n-            data = self._fetch_url_data(url, username, password, verify)\n+            data = self._fetch_url_data(url, username, password, verify, headers)\n+\n+        # ... rest of the method remains unchanged ...\n \n         collect_aggregates_only = _is_affirmative(\n             instance.get('collect_aggregates_only', True)\n@@ -160,7 +166,7 @@ class HAProxy(AgentCheck):\n             tags_regex=tags_regex,\n         )\n \n-    def _fetch_url_data(self, url, username, password, verify):\n+    def _fetch_url_data(self, url, username, password, verify, custom_headers=None):\n         ''' Hit a given http url and return the stats lines '''\n         # Try to fetch data from the stats URL\n \n@@ -169,7 +175,12 @@ class HAProxy(AgentCheck):\n \n         self.log.debug(\"Fetching haproxy stats from url: %s\" % url)\n \n-        response = requests.get(url, auth=auth, headers=headers(self.agentConfig), verify=verify, timeout=self.default_integration_http_timeout)\n+        # Merge custom headers with the default headers\n+        request_headers = headers(self.agentConfig)\n+        if custom_headers:\n+            request_headers.update(custom_headers)\n+\n+        response = requests.get(url, auth=auth, headers=request_headers, verify=verify, timeout=self.default_integration_http_timeout)\n         response.raise_for_status()\n \n         return response.content.splitlines()\ndiff --git a/haproxy/datadog_checks/haproxy/test_haproxy.py b/haproxy/datadog_checks/haproxy/test_haproxy.py\nnew file mode 100644\nindex 0000000000..f0d2fed1cd\n--- /dev/null\n+++ b/haproxy/datadog_checks/haproxy/test_haproxy.py\n@@ -0,0 +1,27 @@\n+from haproxy import HAProxy\n+from unittest.mock import patch\n+import requests\n+\n+# Sample instance configuration with custom headers\n+instance = {\n+    'url': 'http://localhost:3000',\n+    'headers': {\n+        'service-route': 'haproxy-stats'\n+    }\n+}\n+\n+# Initialize the HAProxy check\n+haproxy_check = HAProxy('haproxy', {}, {}, [instance])\n+\n+# Mock the requests.get call to print the headers it would send\n+with patch('requests.get') as mock_get:\n+    mock_get.return_value.status_code = 200\n+    mock_get.return_value.content = b''\n+    haproxy_check.check(instance)\n+    # Ensure the mock was called with the custom headers\n+    args, kwargs = mock_get.call_args\n+    print('Custom headers passed to requests.get:', kwargs['headers'])\n+\n+# Run the test\n+if __name__ == '__main__':\n+    print('Running test...')\n", "model_name_or_path": "SWE-Agent"}