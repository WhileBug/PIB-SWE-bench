{"instance_id": "DataDog__integrations-core-10093", "model_patch": "\ndiff --git a/elastic/datadog_checks/elastic/elastic.py b/elastic/datadog_checks/elastic/elastic.py\nindex a154e2ffcd..bdfd10e86b 100644\n--- a/elastic/datadog_checks/elastic/elastic.py\n+++ b/elastic/datadog_checks/elastic/elastic.py\n@@ -213,7 +213,7 @@ class ESCheck(AgentCheck):\n         if version >= [0, 90, 10]:\n             pending_tasks_url = \"/_cluster/pending_tasks\"\n             stats_url = \"/_nodes/stats\" if self._config.cluster_stats else \"/_nodes/_local/stats\"\n-            if version < [5, 0, 0]:\n+            if version < [5, 0, 0] and not version.get('distribution') == 'opensearch':\n                 # version 5 errors out if the `all` parameter is set\n                 stats_url += \"?all=true\"\n             if version >= [7, 4, 0] and self._config.slm_stats:\ndiff --git a/simulate_check.py b/simulate_check.py\nnew file mode 100644\nindex 0000000000..14b59f31e5\n--- /dev/null\n+++ b/simulate_check.py\n@@ -0,0 +1,24 @@\n+# Simulate the version check logic and URL construction\n+def get_urls(version):\n+    is_opensearch = isinstance(version, dict) and version.get('distribution') == 'opensearch'\n+    if is_opensearch:\n+        # Assume cluster_stats is True for this simulation\n+        stats_url = \"/_nodes/stats\" if True else \"/_nodes/_local/stats\"\n+    elif version >= [0, 90, 10]:\n+        stats_url = \"/_nodes/stats\" if True else \"/_nodes/_local/stats\"  # Assume cluster_stats is True for this simulation\n+        if version < [5, 0, 0]:\n+            stats_url += \"?all=true\"\n+    else:\n+        # legacy\n+        stats_url = \"/_cluster/nodes/stats?all=true\" if True else \"/_cluster/nodes/_local/stats?all=true\"  # Assume cluster_stats is True for this simulation\n+    return stats_url\n+\n+# Simulate an Opensearch version\n+opensearch_version = {'number': '1.0.0', 'distribution': 'opensearch'}\n+constructed_url = get_urls(opensearch_version)\n+print(\"Constructed URL for Opensearch:\", constructed_url)\n+\n+# Simulate an Elasticsearch version\n+elasticsearch_version = [1, 0, 0]  # As a list to match the expected format in the check\n+constructed_url = get_urls(elasticsearch_version)\n+print(\"Constructed URL for Elasticsearch:\", constructed_url)\n", "model_name_or_path": "SWE-Agent"}