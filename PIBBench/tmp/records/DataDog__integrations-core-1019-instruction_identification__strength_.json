{"instance_id": "DataDog__integrations-core-1019", "model_patch": "\ndiff --git a/haproxy/datadog_checks/haproxy/haproxy.py b/haproxy/datadog_checks/haproxy/haproxy.py\nindex eae354a7f4..3823a4937b 100644\n--- a/haproxy/datadog_checks/haproxy/haproxy.py\n+++ b/haproxy/datadog_checks/haproxy/haproxy.py\n@@ -101,20 +101,16 @@ class HAProxy(AgentCheck):\n     SERVICE_CHECK_NAME = 'haproxy.backend_up'\n \n     def check(self, instance):\n-        url = instance.get('url')\n-        self.log.debug('Processing HAProxy data for %s' % url)\n+        url = instance.get('url', None)\n+        if url is None:\n+            raise Exception(\"The url must be specified in the instance configuration\")\n \n-        parsed_url = urlparse.urlparse(url)\n+        username = instance.get('username')\n+        password = instance.get('password')\n+        verify = not _is_affirmative(instance.get('disable_ssl_validation', False))\n+        headers = instance.get('headers', {})\n \n-        if parsed_url.scheme == 'unix':\n-            data = self._fetch_socket_data(parsed_url.path)\n-\n-        else:\n-            username = instance.get('username')\n-            password = instance.get('password')\n-            verify = not _is_affirmative(instance.get('disable_ssl_validation', False))\n-\n-            data = self._fetch_url_data(url, username, password, verify)\n+        data = self._fetch_url_data(url, username, password, verify, headers)\n \n         collect_aggregates_only = _is_affirmative(\n             instance.get('collect_aggregates_only', True)\n@@ -160,7 +156,7 @@ class HAProxy(AgentCheck):\n             tags_regex=tags_regex,\n         )\n \n-    def _fetch_url_data(self, url, username, password, verify):\n+    def _fetch_url_data(self, url, username, password, verify, headers=None):\n         ''' Hit a given http url and return the stats lines '''\n         # Try to fetch data from the stats URL\n \n@@ -169,7 +165,7 @@ class HAProxy(AgentCheck):\n \n         self.log.debug(\"Fetching haproxy stats from url: %s\" % url)\n \n-        response = requests.get(url, auth=auth, headers=headers(self.agentConfig), verify=verify, timeout=self.default_integration_http_timeout)\n+        response = requests.get(url, auth=auth, headers=headers, verify=verify, timeout=self.default_integration_http_timeout)\n         response.raise_for_status()\n \n         return response.content.splitlines()\n", "model_name_or_path": "SWE-Agent"}